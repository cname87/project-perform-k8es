{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
      /* Runs skaffold dev to build and watch */
      /* See https://cloud.google.com/code/docs/vscode/running-an-application for settings */
      /* Can run with (f5) or without debug  (Ctrl+F5) */
      {
        "name": "Run on Kubernetes",
        "type": "cloudcode.kubernetes",
        "request": "launch",
        "skaffoldConfig": "${workspaceFolder}/skaffold.yaml",
        "watch": true,
        "cleanUp": true,
        "portForward": true,
        "imageRegistry": "gcr.io/project-perform",
    },
    /* Attach to backend pods for debug */
    /* Launch 'Run on Kubernetes' with no debug (Ctrl+F5) and then launch this and it attaches. */
    {
      "name": "Debug Backend on Kubernetes",
      "type": "cloudcode.kubernetes",
      "request": "attach",
      "podSelector": {
          "app": "pp",
          "tier": "backend"
      },
      "language": "Node",
      "debugPort": 9229,
      "localRoot": "${workspaceFolder}/backend",
      "remoteRoot": "/backend"
  },
    /* Attach to frontend pods for debug */
    /* Launch 'Run on Kubernetes' with no debug (Ctrl+F5) and then launch this and it attaches. */
    /* This has no value when frontend pod is an nginx server ? /*
    /* Use Chrome Dev Tools to debug client-side code */
    {
        "name": "Debug Frontend on Kubernetes",
        "type": "cloudcode.kubernetes",
        "request": "attach",
        "podSelector": {
            "app": "pp",
            "tier": "frontend"
        },
        "language": "Node",
        "debugPort": 9229,
        "localRoot": "${workspaceFolder}/frontend",
        "remoteRoot": "/frontend"
    },
    // Serve frontend with backend - use for frontend debug with watch
    {
      /*
      First it calls a task which starts the backend server, and then compiles the frontend with watch and serves it on localhost:4200 (i.e. a local server that serves up the Angular SPA listening on port 4200).
      Note: proxy.conf is configured in angular.json to route api requests (i.e.e. those headed api-v1) to the backend server.  Thus you must start the backend server in advance to handle the api requests.
      Second, once the pre-launch task ends, Chrome launches.
      For debug, you may need to use Chrome DevTools sources to put in the first breakpoint, which should then sync with VSCode.
      Close all open Chrome instances if Chrome won't start. */
      "name": "Serve frontend with backend",
      "type": "chrome",
      "preLaunchTask": "Serve Frontend with Backend",
      "postDebugTask": "Taskkill node.exe",
      "request": "launch",
      "cwd": "${workspaceFolder}/frontend",
      "url": "http://localhost:4200/", // proxy to 8080 for api calls
      "webRoot": "${workspaceFolder}/frontend/dist",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*":   "${workspaceFolder}/frontend/*",
      },
    },
    // Test frontend - use for frontend unit test debug with watch
    {
      /*
      Runs 'Test Frontend' task first, i.e. 'ng test:dev', which compiles and serves the front end and opens Chrome and connects to the Karma runner and runs the unit tests.  Once this task exits without error, following the test run, it THEN starts Chrome again and connects to the Karma runner for a second test run.  Debug should work on the second session.
      You may need to use Chrome DevTools sources to put in the first breakpoint.
      If there are probelms, run the preLaunch task manually first.
      Close all open Chrome instances if Chrome won't start.
       */
      "name": "Test frontend",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "Test Frontend",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--incognito",
        "--new-window",
        "--start-maximized",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "cwd": "${workspaceFolder}/frontend",
      "userDataDir":true,
      "url": "http://localhost:9876/debug.html",
      "webRoot": "${workspaceFolder}/frontend/dist/",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*":   "${workspaceFolder}/frontend/*",
      },
      "sourceMaps": true,
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "breakOnLoad": true,
      "breakOnLoadStrategy": "instrument",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // e2e frontend with backend - use for frontend e2e test debug
    {
      /**

      1. *** Choose the .dev, .staging or .production configuration by editing the args field below. ***
      These point at a corresponding e2e .env file. The .env file lists the .spec files which are run and the baseUrl to which all url requests sre sent.
      (i) dev.conf: localhost:4200 and run all tests - USE by DEFAULT
      (ii) production.conf: project-perform.com and dont' run cache/error tests - use to test the production server.
      (iii) staging.conf: backend:8080 - used only in cloudbuild.

      2. *** Serve the front-end in advance (unless testing against the production server). ***
      There are 3 serve options (which each load a different environment file.) - a parameter sets the interceptors that allow error or cache testing. Run 'npm run ...':
      (i) serve:e2e - should be run to allow cache and error tests.  USE by DEFAULT
      (ii) serve:dev - if run will fail error and cache tests => NO.
      (iii) serve:prod - if run will fail error and cache tests => No.

      3. *** Start the backend server in advance (unless testing against the production server)***
      If you started the frontend using serve:xxx then calls to /apiv1 and /testServer are proxied (via proxy.conf) to localhots:8080.
      => Run the launch configuration that starts the baceknd on localhost:8080.

      4. *** Run this launcg configuration ***
      This then runs e2e tests against the application allowing VSCode debug of the e2e .spec files. Use Chrome DevTools if browser-side debug is needed.

      VALID OPTIONS:
      - Choose the -dev conf file (which is configured to target localhost:4200 and proxy to localhost:8080. Then run serve:e2e (which allows error and cache testing) and then launch the backend server on 8080:
      - Choose the -production conf file (which is configured to test against projectperform.com and skip cache and error testing).  No need to serve a local forntend or backend server.
      - Note: The -staging conf file is configured to test against a server only available on cloudbuild (and skips cache and error testing).
      NOTE: You can target a server directly by setting the BASE_URL below.
      */
      "name": "E2e frontend with backend",
      "type": "node",
      "request": "launch",
      "postDebugTask": "Taskkill node.exe",
      "program": "${workspaceFolder}/frontend//node_modules/protractor/bin/protractor",
      "protocol": "inspector",
      "args": [
        /* Edit here to choose one of either -dev or -production configuration file . */
        "${workspaceFolder}/frontend/e2e/src/config/protractor-dev.conf.js",
        // "${workspaceFolder}/frontend/e2e/src/config/protractor-production.conf.js",
      ],
      "env": {
        /* can set the base-url to a specific deployed build */
        // "BASE_URL": "http://localhost:4200"
        // "BASE_URL": "https://project-perform.com"
      },
      "cwd": "${workspaceFolder}/frontend",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // Run the backend server (app.ts) on localhost:8080.
    {
      "name": "Run backend app.ts",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/src/app.ts",
      "cwd": "${workspaceFolder}/backend",
      "env": {
        "NODE_ENV": "development",
        // "NODE_ENV": "staging"
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        // allows type node 'run' typescript by looking for the js file.
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": true,
    },
    // https://localhost:8080/
    {
      /* Starts Chrome and connects to localhost:8080.
      The server is started in a prelaunch task. */
      /*
      TODO:  This navigates to the backend only - I should start the backend and serve on 4200 and then open localhost:4200
      */
      "name": "Open http://localhost:8080/",
      "type": "chrome",
      "preLaunchTask": "Check Server",
      "postDebugTask": "Taskkill node.exe",
      "request": "launch",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "http://localhost:8080/",
      // tell vscode where to find scripts on the server
      "webRoot": "${workspaceFolder}/frontend/dist",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
        "/testServer": "${workspaceFolder}/backend/dist/test/client/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/frontend/*",
      },
      "smartStep": false,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
    },
    // Run Mocha backend tests
    {
      "name": "Run Mocha backend tests",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/models.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server.test.js",
        "${workspaceFolder}/backend/dist/src/test/app.test.js",
      ],
      "env": {
        "NODE_ENV": "development",
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/backend/node_modules/**/*",
        "${workspaceFolder}/backend/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // Run Mocha backend tests with Istanbul
    {
      "name": "Run Mocha backend tests with Istanbul",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/node_modules/nyc/bin/nyc",
      "args": [
        "--nycrc-path", "${workspaceFolder}/backend/.nycrc.json",
        "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/*.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver.test.js",
        "${workspaceFolder}/backend/dist/src/test/app.test.js",

      ],
      "env": {
        /* need to enable DEBUG when using nyc (why?) */
        "DEBUG": "PP*",
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/backend/node_modules/**/*",
        "${workspaceFolder}/backend/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // Run Mocha client-fired server tests only.
    {
      /* This calls mocha to run one or two server-side test files.
      The test files set up some mocks to simulate errors and also event handlers to recive reports of test starts and completions from a browser.
      Chrome must then be started with a specific url that loads browser-side mocha scripts that test server functionality such as including error condition responses.
      The files start Chrome automatically if process.env.DISABLE_CHROME is false.  This does not allow for using VSCode for client-side debug.
      Otherwise (to allow using VSCODE for client-side debug) you can load the testServer/xxx-loadMocha.html file manually after running this on one file only, or, if you would like VSCode debug of the browser-side, then use a Chrome launch configuration to load the matching xxx-loadMocha.html - there are two xxx-loadMocha.html files - make sure you use the one that matches the server-side test file. */
      "name": "Run Mocha client-fired server tests",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js to load .env */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* Comment out to select the tests to run */
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        // "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
      ],
      "env": {
        /* set to 'false' to automatically run chrome and set to 'true' to launch chrome manually */
        "DISABLE_CHROME": "true",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // http://localhost:8080/testServer/xxx-loadMocha.html
    {
      /* Starts Chrome and loads one of two client-side browser test files. */
      /* The equivalent server-side test file must be started in advance of running this, (with automatic start of Chrome disabled). */
      /* Note: There are two xxx-loadmocha.html files - make sure you use the one that matches the server-side test file. */
      "name": "Open http://localhost:8080/testServer/xxx-loadMocha.html",
      "type": "chrome",
      "request": "launch",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "breakOnLoad": true, // set a breakpoint in the client-static test file before launch
      "userDataDir": true,
      /* NOTE: comment out to run a specific xxx-loadMocha*/
      "url": "http://localhost:8080/testServer/api-loadMocha.html",
      // "url": "http://localhost:8080/testServer/errors-loadMocha.html",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/testServer": "${workspaceFolder}/backend/src/test/client-static",
      },
      /* Note that sourceMapPathOverrides are not necessary as only loadmocha and the client-static test files are loaded directly. */
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
    },
    // Run current .js file
    {
      "type": "node",
      "request": "launch",
      "name": "Run the currently opened .js file",
      "program": "${file}",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
    },
    // Run current .ts file
    {
      "type": "node",
      "request": "launch",
      "name": "Run the currently opened .ts file",
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "runtimeArgs": [
          "-r",
          "ts-node/register"
      ],
      "args": [
          "${file}",
      ],
      "env": {
        "TS_NODE_PROJECT": "tsconfig.json",
      },
    },


  ],
  "compounds": [
    /* Run backend server and browse to root */
    /* This is just a demo of a compound configuration */
    {
      /* To debug angular you may need to go into Chrome and set the first breakpoint. If you have difficulty setting breakpoints in vscode then use Chrome DevTools. */
      "name": "Backend/Frontend",
      "configurations": [
        "Run backend app.ts",
        "Open http://localhost:8080/",
      ]
    },
  ],
}
