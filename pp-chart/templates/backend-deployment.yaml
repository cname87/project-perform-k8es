kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ include "pp-chart.fullname" . }}-backend-deployment
  namespace: default
  labels:
    {{- include "pp-chart.labels" . | nindent 4 }}
    app: pp
    tier: backend
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "pp-chart.selectorLabels" . | nindent 6 }}
      app: pp
      tier: backend
  # Describes the pods that will be created.
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "pp-chart.selectorLabels" . | nindent 8 }}
        app: pp
        tier: backend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pp-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          # For skaffold to work, this must be a .Values reference - this is replaced by the same reference in artifactOverrides in skaffold.yaml. 
          image:  {{ .Values.backend.image }} 
          # Note: If set to 'Always' will fail on Minikube
          # 'Always' may avoid caching issues when making changes?
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name:  {{ .Values.backend.deployment.portName }}
              # Backend server must be open on this port
              containerPort: {{ .Values.backend.deployment.portValue }}
              protocol: TCP
          env:
            # Env variables here will override configmap below
            # Set PORT to match the containerPort value
            - name: PORT
              value: {{ .Values.backend.deployment.portValue | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "pp-chart.fullname" . -}}{{- .Values.configmap.nameTag }}
            - secretRef:
                name: {{ include "pp-chart.fullname" . -}}{{- .Values.secret.nameTag }}
          # Stops sending requests if this fails
          readinessProbe:
            httpGet:
              path: /ready
              port:  {{ .Values.backend.deployment.portValue }}
            timeoutSeconds: 5
            failureThreshold: 20
            periodSeconds: 10
          # Restarts if this fails
          livenessProbe:
            httpGet:
              path: /health
              port:  {{ .Values.backend.deployment.portValue }}
            initialDelaySeconds: 300
            # Must be 1s for liveness
            timeoutSeconds: 1
            failureThreshold: 1
            periodSeconds: 300
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
